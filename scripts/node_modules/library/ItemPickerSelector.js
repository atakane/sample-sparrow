/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const Label = require('sf-core/ui/label');
const Color = require('sf-core/ui/color');
const FlexLayout = require('sf-core/ui/flexlayout');
const ImageView = require('sf-core/ui/imageview');
const ImageFillType = require('sf-core/ui/imagefilltype');
const Image = require('sf-core/ui/image');



const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const ItemPickerSelector = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const pickerLabelStyle = getCombinedStyle(".label .label-picker.normal", {
			height: null,
			backgroundColor: Color.create(0, 255, 255, 255),
			width: null,
			text: "Color",
			flexGrow: 1,
			alignSelf: FlexLayout.AlignSelf.STRETCH
		});
		var pickerLabel = new Label(pickerLabelStyle);
		if(pickerLabelStyle.scrollEnabled === false)
			pickerLabel.ios && (pickerLabel.ios.scrollEnabled = false);
		this.addChild(pickerLabel);
		this.pickerLabel = pickerLabel;

		const imageview2Style = getCombinedStyle(".imageView", {
			width: 12,
			height: 12,
			imageFillType: ImageFillType.ASPECTFIT,
			image: Image.createFromFile("images://arrows.png")
		});
		var imageview2 = new ImageView(imageview2Style);
		this.addChild(imageview2);
		
		//assign the children to itemPickerSelector 
		this.children = Object.assign({}, {
			pickerLabel: pickerLabel,
			imageview2: imageview2
		});
		
	});

ItemPickerSelector.defaults = getCombinedStyle(".flexLayout", {
	width: 119.2,
	height: 41.6,
	backgroundColor: Color.create(0, 255, 255, 255),
	paddingLeft: 10,
	paddingRight: 10,
	flexDirection: FlexLayout.FlexDirection.ROW,
	alignItems: FlexLayout.AlignItems.CENTER,
	justifyContent: FlexLayout.JustifyContent.CENTER,
	alignContent: FlexLayout.AlignContent.CENTER
});

module && (module.exports = ItemPickerSelector);